# 🔒 Gestión y verificación de roles para usuario SOPORTE

## 1. Verificar rol actual del usuario "soporte@autonoma.edu.bo"

- Consulta SQL para usuario:
  ```sql
  SELECT * FROM authz_usuario WHERE email = 'soporte@autonoma.edu.bo';
  ```
- Consulta SQL para roles asociados:
  ```sql
  SELECT * FROM authz_usuario_roles WHERE usuario_id = (SELECT id FROM authz_usuario WHERE email = 'soporte@autonoma.edu.bo');
  ```

## 2. Verificar todos los roles disponibles

- Consulta SQL:
  ```sql
  SELECT * FROM authz_rol ORDER BY id;
  ```
- Según los seeds, deberían ser:
  - ID 1 = ADMIN
  - ID 2 = OPERADOR
  - ID 3 = CLIENTE
  - ID 4 = SOPORTE

## 3. Verificar endpoint de listado de usuarios

- Endpoint: `GET /api/usuarios/`
- Respuesta esperada para usuario soporte:
  ```json
  {
    "id": 4,
    "email": "soporte@autonoma.edu.bo",
    "nombres": "Soporte",
    "apellidos": "Sistema",
    "roles": [4],
    "estado": "ACTIVO"
    // ...otros campos
  }
  ```

## 4. Asignar/cambiar rol SOPORTE

- Endpoint disponible:
  ```
  POST /api/usuarios/{id}/asignar-rol/
  Body: { "rol": "SOPORTE" }
  ```
- Alternativa SQL:
  ```sql
  UPDATE authz_usuario_roles SET rol_id = 4 WHERE usuario_id = 4;
  ```

## 5. Estructura de respuesta de usuario

- Respuesta esperada:
  ```json
  {
    "id": 4,
    "email": "soporte@autonoma.edu.bo",
    "nombres": "Soporte",
    "apellidos": "Sistema",
    "roles": [4],
    "estado": "ACTIVO"
    // ...otros campos
  }
  ```
- El campo `roles` es un array de IDs. Si tiene múltiples roles, aparecerán todos los IDs.

---

## Resumen de acción recomendada

1. Verifica el rol actual del usuario con las consultas SQL.
2. Si no tiene el rol SOPORTE (ID 4), asígnalo usando el endpoint `/api/usuarios/{id}/asignar-rol/` o por SQL.
3. Confirma con el endpoint de listado que el usuario tiene el rol correcto.

---

¿Necesitas ejemplos de cómo hacer estas peticiones desde el frontend o scripts para automatizarlo?
